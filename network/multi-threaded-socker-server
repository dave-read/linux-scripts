#!/usr/bin/env python
#
# Copyright (c) Microsoft.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#--------------------------------------------------------------------------

import socket
import sys
import threading
from multiprocessing import Lock

class Counter(object):
    def __init__(self, initval=0):
        self.val = initval
        self.lock = Lock()

    def increment(self):
        with self.lock:
            self.val += 1
            return self.val
    
    def decrement(self):
        with self.lock:
            self.val -= 1
            return self.val

    def value(self):
        with self.lock:
            return self.val

class ThreadedServer(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind((self.host, self.port))

    def listen(self):
        self.sock.listen(100)
        while True:
            client, address = self.sock.accept()
            client.settimeout(60*5)
            print "event=client-connected client-address="+str(address)+" total-clients="+str(client_counter.increment())
            threading.Thread(target = self.listenToClient,args = (client,address)).start()

    def listenToClient(self, client, address):
        size = 1024
        while True:
            try:
                data = client.recv(size)
                if data:
                    # Set the response to echo back the recieved data 
                    response = data.rstrip("\n")
                    client.send(response)
                    print "event=client-data client-address="+str(address)+" total-clients="+str(client_counter.value())+" data="+str(response)
                else:
                    raise error('Client disconnected')
            except:
                print "event=client-closed client-address="+str(address)+" total-clients="+str(client_counter.decrement())
                client.close()
                return False

if len(sys.argv) != 3:
    print "usage listen_host listen_port"
    exit(1)

HOST = sys.argv[1]
PORT = int(sys.argv[2])
print "starting server on HOST:"+HOST+" port:"+str(PORT)
client_counter=Counter(0)

ThreadedServer(HOST,PORT).listen()